// main global script file


// INITIALIZE : A function that initializes a bunch of stuff. ------------
function initialize_control_panel() { 

  // Centre the control panel
  gControlPanel.Centre();
    
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
    
  //And now, set all the defaults
  System.Volume = 90;
  sldAudio.Value = System.Volume;
  SetGameSpeed(60);
  sldSpeed.Value = 60;
 
  mouse.DisableMode(eModeLookat);
  mouse.DisableMode(eModeTalkto);
  mouse.DisableMode(eModeWalkto);
}
// ------------------- End Initialize -----------------------



// called when the game starts, before the first room is loaded
function game_start() 
{
  initialize_control_panel();

}


// -------- SAVE: Save Game Dialog ----------------------------
function show_save_game_dialog()
{
  
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);

}
// ------------------End Save Dialog-----------------------------


// ---------- RESTORE:  Restore Game Dialog ---------------------
function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  
}
//------------------End Restore Dialog---------------------------


// ------ SAVE functions -------
function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = lstSaveGamesList.ItemCount + 1;
  int i = 0;
  
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == txtNewSaveName.Text)
    {
      gameSlotToSaveInto = lstSaveGamesList.SaveGameSlots[i];
    }
    i++;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}


function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}


function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}
// ------------ End SAVE functions -------------


// ------------ RESTORE functions ---------------------

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
}


function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}
// ---- End RESTORE functions


//Loading
function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
  Wait(1);
 show_restore_game_dialog();
}

//Resume
function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  mouse.UseDefaultGraphic();
}


//----- RESTART functions -------
function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
   mouse.UseModeGraphic(eModePointer);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
 
  if (!gControlPanel.Visible) mouse.UseDefaultGraphic(); 
}
// ----- END Restart Functions ------


//Quit
function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  gControlPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  gControlPanel.Visible = true;
  mouse.UseModeGraphic(eModePointer);
}

//Audio Change
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

//Speed Change
function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}


function btnSave_OnClick(GUIControl *control, MouseButton button)
{
    show_save_game_dialog();
}

function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value;
}


// ------------- END TEMPLATE FUNCTIONS ------------------------------------



// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  //if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  //if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  //if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room
  
  
   if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  
  
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
    if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gControlPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  
  if ((keycode == eKeyEscape) && gControlPanel.Visible) {
    // Use ESC to turn the panel off.
    gControlPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    return;
  }
  
    // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    gCredits.Visible = false;
    gControlPanel.Visible = true; 
    mouse.UseModeGraphic(eModePointer);
  }
  
  
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
  else // right-click, so cycle cursor
  {   
    mouse.SelectNextMode();
  }
}


function dialog_request(int param) {
}

function cGuard_Interact()
{
  
  if ( doordown == 2 ) {    
    //Guard blows up
    aGodsHand.Play(eAudioPriorityVeryHigh, eRepeat);
    //aGUAR05.Play(eAudioPriorityHigh, eRepeat);
    
    cGuard.LockView(15);
    cGuard.Animate(3, 15, eOnce, eBlock, eForwards);
    
    cGuard.Move(110, 225, eBlock, eAnywhere);
    cGuard.Animate(4, 25, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 23, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 20, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 18, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 16, eOnce, eNoBlock, eForwards);
    cGuard.Move(110, 90,  eBlock,eAnywhere);
    cGuard.Animate(4, 14, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 13, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 12, eOnce, eNoBlock, eForwards);
    cGuard.Move(205, 100, eBlock,eAnywhere);
    
    ShakeScreenBackground(10, 15, 80);
    
    cGuard.Animate(4, 11, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 10, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 9, eOnce, eNoBlock, eBackwards);
    cGuard.Move(180,145, eBlock, eAnywhere);
        aGUAR05.Stop();
    cGuard.Animate(4, 8, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 7, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 5, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 4, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 3, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 2, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 1, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 1, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 1, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 1, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 1, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eBackwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);
    cGuard.Animate(4, 0, eOnce, eBlock, eForwards);    
    
    cGuard.Animate(5, 8, eOnce, eBlock, eForwards);
    cGuard.ChangeRoom(-1);
    doordown = 3;
  }  
  
}
